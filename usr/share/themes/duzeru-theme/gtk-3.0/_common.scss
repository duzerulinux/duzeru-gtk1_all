* {
  -GtkToolButton-icon-spacing: 4;
  -GtkTextView-error-underline-color: $error_color;
  -GtkPaned-handle-size: 5;

  -GtkCheckButton-indicator-size: 16;
  -GtkCheckMenuItem-indicator-size: 16;

  // The size for scrollbars. The slider is 2px smaller, but we keep it
  // up so that the whole area is sensitive to button presses for the
  // slider. The stepper button is larger in both directions, the slider
  // only in the width

  -GtkScrolledWindow-scrollbar-spacing: 0;
  -GtkScrolledWindow-scrollbars-within-bevel: 1;

  -GtkToolItemGroup-expander-size: 11;
  -GtkExpander-expander-size: 16;
  -GtkTreeView-expander-size: 11;

  -GtkTreeView-horizontal-separator: 4;

  -GtkMenu-horizontal-padding: 0;
  -GtkMenu-vertical-padding: 0;

  -GtkWidget-link-color: $link_color;
  -GtkWidget-visited-link-color: $link_visited_color;

  -GtkWidget-focus-padding: 2;    // FIXME: do we still need these?
  -GtkWidget-focus-line-width: 1; //

  -GtkDialog-button-spacing: 4;
  -GtkDialog-action-area-border: 0;

  -GtkStatusbar-shadow-type: none;

  background-clip: padding-box;

  // We use the outline properties to signal the focus properties
  // to the adwaita engine: using real CSS properties is faster,
  // and we don't use any outlines for now.

  outline-color: transparentize($fg_color, 0.7);
  outline-style: dashed;
  outline-offset: -3px;
  outline-width: 1px;
  outline-radius: 2px;
}


//
// Base States
//
.background {
  color: $fg_color;
  background-color: $bg_color;
}

//   This wildcard seems unavoidable, need to investigate.
//   Wildcards are bad and troublesome, use them with care,
//   or better, just don't.
//   Everytime a wildcard is used a kitten dies, painfully.
*:insensitive {
  -gtk-image-effect: dim;
}

.gtkstyle-fallback {
  background-color: $bg_color;
  color: $fg_color;
  &:prelight {
    background-color: lighten($bg_color, 10%);
    color: $fg_color;
  }
  &:active {
    background-color: darken($bg_color, 10%);
    color: $fg_color;
  }
  &:insensitive {
    background-color: $insensitive_bg_color;
    color: $insensitive_fg_color;
  }
  &:selected {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }
}

.view {
  color: $text_color;
  background-color: $base_color;

  &:selected,
  &:selected:focus,
  &:selected:hover {
    @extend %selected_items;
    text-shadow: 0 -1px $dark_text_icon_shadow;
  }
  &.dim-label { 
    color: transparentize($text_color, 0.45);

    &:selected, &:selected:focus {
      color: transparentize($selected_fg_color, 0.35);
      text-shadow: none;
    }
  }
}

.rubberband {
  border: 1px solid $selected_bg_color;
  background-color: transparentize($selected_bg_color,0.8);
}

// This is used by GtkScrolledWindow, when rendering the edge
// gradient shown when content is touch-dragged past boundaries.
// The color is used as a base for such gradient, which is then
// stretched/modified as a direct result of user interaction.
.overshoot {
  background-color: transparentize($selected_bg_color,0.8);
}

GtkLabel {
  &.separator {
    color: transparentize($fg_color, 0.2);
    @extend .dim-label;
  }
  &:selected,
  &:selected:focus,
  &:selected:hover {
    @extend %selected_items;
  }
  &:insensitive {
    color: $insensitive_fg_color;
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

GtkAssistant {
  .sidebar {
    background-color: $sidebar_bg;
    border-top: 1px solid $borders_color;
    &:dir(ltr) { border-right: 1px solid $borders_color; }
    &:dir(rtl) { border-left: 1px solid $borders_color; }
  }
  &.csd .sidebar { border-top-style: none; }
  .sidebar GtkLabel {
    padding: 6px 12px;
  }
  .sidebar GtkLabel.highlight {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
    text-shadow: 0 -1px $dark_text_icon_shadow; 
    icon-shadow: none;
  }
}

// This will get overridden by .view, needed by gedit line numbers
GtkTextView {
  background-color: mix($bg_color, $base_color, 50%);
}

GtkFlowBox .grid-child {
  padding: 3px;
  border-radius: 3px;
  &:selected {
    @extend %selected_items;
    outline-offset: -2px;
  }
}

.osd {
  color: $osd_fg_color;
  outline-color: transparentize($osd_fg_color, 0.7);
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  box-shadow: none;
  text-shadow: 0 -1px $osd_text_shadow;
  icon-shadow: 0 -1px $osd_text_shadow;
}

.stack-switcher.osd { background-color: transparent; } // no background-color needed here
                                                       // see gnome-weather
//
// Spinner Animation
//
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

.spinner {
  background-image: none;
  background-color: blue;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');
  &:active {
    opacity: 1;
    animation: spin 1s linear infinite;
    &:insensitive {
      opacity: 0.5;
    }
  }
}

//
// Text Entries
//
.entry {
  padding: 4px 8px 5px;
  transition: all 200ms $ease-out-quad;
  @include entry(normal);
  background-color: $base_color; // fixes bug in abiword

  // icons inside the entry
  &.image {
    &.left { padding-left: 0; }
    &.right { padding-right: 0; }
  }

  &.flat, &.flat:focus {
    padding: 2px;
    background-color: $entry_bg_color;
    border: none;
    border-radius: 0;
  }

  &:focus { @include entry(focus); }

  &:insensitive { @include entry(insensitive); }

  &:selected {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &:selected,
  &:selected:focus {
    @extend %selected_items;
  }

  &.progressbar {
    margin: 0 2px 3px 2px;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: $selected_bg_color;
    border-style: solid;
    background-image: none;
    background-color: transparent;
    box-shadow: none;
    border-image: none;
  }

  // Linked Entries
  .linked & {
    padding: 5px 8px 5px;
    @extend %entry_linked;
  }
  .linked.vertical & {
    @extend %entry_linked_vertical;
  }

  &.error {
    color: $error_color;
    background-image: linear-gradient(to bottom, mix($error_color, $entry_bg_color, 20%));
    &:selected, &:selected:focus {
      background-color: $error_color;
    }
  }

  &.warning {
    color: $warning_color;
    background-image: linear-gradient(to bottom, mix($warning_color, $entry_bg_color, 20%));
    &:selected, &:selected:focus {
      background-color: $warning_color;
    }
  }

  &.image { // entry icons colors
    color: $fg_color;
    &:hover { color: $fg_color; }
    &:active { color: $selected_bg_color; }
  }
}

// Extends for linked entries
%entry_linked_middle {
  @include linked(entry, normal, middle);
  &:focus { @include linked(entry, focused, middle) }  
}

%entry_linked {
  @extend %entry_linked_middle;

  &:first-child {
    @include linked(entry, normal, left);
    &:focus { @include linked(entry, focused, left) }
  }
  &:last-child {
    @include linked(entry, normal, right);
    &:focus { @include linked(entry, focused, right) }
  }
  &:only-child {
    @include linked(entry, normal, single);
    &:focus { @include linked(entry, focused, single); }
  }
}

%entry_linked_middle_vertical {
  @include linked(entry, normal, middle-vertical);
  &:focus { @include linked(entry, focused, middle-vertical); }
}

%entry_linked_vertical {
  @extend %entry_linked_middle_vertical;

  &:first-child {
    @include linked(entry, normal, top-vertical);
    &:focus { @include linked(entry, focused, top-vertical); }
  }
  &:last-child {
    @include linked(entry, normal, bottom-vertical);
    &:focus { @include linked(entry, focused, bottom-vertical); }
  }
  &:only-child {
    @include linked(entry, normal, single);
    &:focus { @include linked(entry, focused, single); }
  }
}

//
// Buttons
//

// stuff for .needs-attention
$_dot_color: if($variant=='light', $selected_bg_color,
                                   lighten($selected_bg_color,15%));
@keyframes needs_attention {
  from {
    background-image: -gtk-gradient(radial, center center, 0, center center, 0.01, to($_dot_color), to(transparent));
  }
  to {
    background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to($selected_bg_color), to(transparent));
  }
}

.button {

  $_button_transition: all 200ms $ease-out-quad;

  padding: 4px 8px 5px;
  transition: $_button_transition;
  @include button(normal);
  &.flat { 
    @include button(undecorated);
    text-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
    icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
    // to avoid adiacent buttons borders clashing when transitioning, the transition on the normal state is set
    // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
    // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
    // in this case the duration is increased.
    transition: none;
    &:hover {
      transition: $_button_transition;
      transition-duration: 350ms;
      &:active {
        transition: $_button_transition;
        transition-duration: 50ms;
      }
    }
  }
  &:focus { @include button(focus); }
  &:hover {
    @include button(hover);
    -gtk-image-effect: highlight;
  }
  &:active, &:checked {
    @include button(active);
    transition-duration: 50ms;
  }
  &.flat:insensitive {
    @include button(undecorated);
  }
  &:insensitive {
    @include button(insensitive);
    &:active, &:checked {
      @include button(insensitive-active);
    }
  }

  // big standalone buttons like in Documents pager
  &.osd {
    @include button(osd);

    &:hover { @include button(osd-hover); }
    &:active, &:checked { @include button(osd-active); }
    &:insensitive { @include button(osd-insensitive); }
  }

  //overlay / OSD style
  .osd &, .osd .linked & {

    @include button(osd, $border:false);

    @include _border(middle-button-normal-border-dark, $radius: 0, $width: 1px 0 2px 0, $image_width: 2 1 3 1 / 2px 1px 3px 1px);
    &:active, &:checked { @include _border(middle-button-active-border-dark, $radius: 0, $width: 1px 0 2px 0, $image_width: 2 1 3 1 / 2px 1px 3px 1px); }

    &:first-child {
      @include _border(left-button-normal-border-dark, $radius: 2px 0 0 2px, $width: 1px 0 2px 1px, $image_width: 2 1 3 2 / 2px 1px 3px 2px);
      &:active, &:checked { @include _border(left-button-active-border-dark, $radius: 2px 0 0 2px, $width: 1px 0 2px 1px, $image_width: 2 1 3 2 / 2px 1px 3px 2px); }
    }
    &:last-child {
      @include _border(right-button-normal-border-dark, $radius: 0 2px 2px 0, $width: 1px 1px 2px 0, $image_width: 2 2 3 1 / 2px 2px 3px 1px);
      &:active, &:checked { @include _border(right-button-active-border-dark, $radius: 0 2px 2px 0, $width: 1px 1px 2px 0, $image_width: 2 2 3 1 / 2px 2px 3px 1px); }
    }
    &:only-child {
      @include _border(button-normal-border-dark);
      &:active, &:checked { @include _border(button-active-border-dark); }
    }

    &:hover { @include button(osd-hover, $border:false); }
    &:active, &:checked { @include button(osd-active, $border:false); }
    &:insensitive { @include button(osd-insensitive, $border:false); }

    &.flat {
      @include button(undecorated);

      border: 1px solid transparent;

      text-shadow: 0 -1px $osd_text_shadow;
      icon-shadow: 0 -1px $osd_text_shadow;

      &:hover { color: $selected_bg_color; }
      &:insensitive { color: $osd_insensitive_fg_color; }
      &:active, &:checked { @include button(osd-active); }
    }
  }

  // Suggested and Destructive Action buttons
  $_destructive: $destructive_color_a, $destructive_color_b;
  $_suggested: $suggested_color_a, $suggested_color_b;

  @each $b_type, $b_color in (suggested, $_suggested),
                              (destructive, $_destructive) {
    &.#{$b_type}-action {
      color: $selected_fg_color;
      outline-color: transparentize($selected_fg_color, 0.7);
      background-image: linear-gradient(to bottom, nth($b_color, 1), nth($b_color, 2));

      text-shadow: 0 -1px $action_button_shadow;
      icon-shadow: 0 -1px $action_button_shadow;

      @include _border(button-normal-border-#{$b_type}#{$asset_suffix});

      &:hover {
        background-image: linear-gradient(to bottom, lighten(nth($b_color, 1), 4%), lighten(nth($b_color, 2), 2%));
      }
      &:active, &:checked {
        color: $selected_fg_color;
        background-image: linear-gradient(to bottom, darken(nth($b_color, 2), 5%), darken(nth($b_color, 1), 5%));

        @include _border(button-active-border-#{$b_type}#{$asset_suffix});
      }
      &:insensitive {
        color: transparentize($selected_fg_color, 0.4);
        background-image: linear-gradient(to bottom, transparentize(nth($b_color, 1), 0.2));

        text-shadow: none;
        icon-shadow: none;

        > GtkLabel, GtkLabel { color: inherit; }

        &:active, &:checked {
          background-image: linear-gradient(to bottom, transparentize(nth($b_color, 1), 0.1));

          > GtkLabel, GtkLabel { color: inherit; }
        }
      }
    }
    .linked &.#{$b_type}-action,
    .linked &.#{$b_type}-action:hover { @extend %#{$b_type}_linked; }
  }

  &.image-button { padding: 8px; }

  &.text-button {
    padding-left: 16px;
    padding-right: 16px;
  }

  &.text-button.image-button {
    // those buttons needs uneven horizontal padding, we want the icon side
    // to have the image-button padding, while the text side the text-button
    // one, so we're adding the missing padding to the label depending on
    // its position inside the button
    padding: 4px 8px 5px; // same as .button
    GtkLabel:first-child { padding-left: 8px; }
    GtkLabel:last-child { padding-right: 8px; }
  }

  .header-bar &.text-button,
  .primary-toolbar &.text-button,
  .toolbar &.text-button,
  .action-bar &.text-button {
    padding: 4px 16px 4px 16px;
  }

  .header-bar &.image-button,
  .primary-toolbar &.image-button,
  .toolbar &.image-button,
  .action-bar &.image-button  {
    padding: 4px 8px 4px 8px;
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -3px; // needs to be set or it gets overridden by GtkRadioButton outline-offset

    > GtkLabel {
      padding-left: 6px;  // label padding
      padding-right: 6px; //
    }
    > GtkImage {
      padding-left: 6px;   // image padding
      padding-right: 6px;  //
      padding-top: 3px;    //
      padding-bottom: 3px; //
    }
    &.text-button {
      padding-left: 10px;
      padding-right: 10px;
      padding-top: 4px;
      padding-bottom: 5px;
    }
    &.image-button {
      padding: 1px 3px;
    }
    &.needs-attention > GtkLabel,
    &.needs-attention > GtkImage { @extend %needs_attention }
    &.needs-attention:active > GtkLabel,
    &.needs-attention:active > GtkImage,
    &.needs-attention:checked > GtkLabel,
    &.needs-attention:checked > GtkImage {
      animation: none;
      background-image: none;
    }
  }

%needs_attention {
  animation: needs_attention 150ms ease-in;
  background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to($selected_bg_color), to(transparent)),
                    -gtk-gradient(radial, center center, 0, center center, 0.5, to(rgba(255, 255, 255, 0.2)), to(transparent));
  background-size: 6px 6px, 6px 6px;
  background-repeat: no-repeat;
  background-position: right 3px, right 4px;
  //@if $variant == 'light' { background-position: right 3px, right 4px; } //FIXME is this neccessary?
  //@else { background-position: right 3px, right 2px; }
  &:dir(rtl) {
    background-position: left 3px, left 4px;
    //@if $variant == 'light' { background-position: left 3px, left 4px; }
    //@else { background-position: left 3px, left 2px; }
  }
}

  //inline-toolbar buttons
  .inline-toolbar & { @extend %linked; }

  .linked &,
  .linked &:hover { @extend %linked; }

  .linked.vertical &,
  .linked.vertical &:hover { @extend %linked_vertical; }
}

// all the following is for the +|- buttons on inline toolbars, that way
// should really be deprecated...
.inline-toolbar GtkToolButton > .button { // redefining the button look is
                                          // needed since those are flat...
  @include button(normal);
  &:hover { @include button(hover); }
  &:active,
  &:checked{ @include button(active); }
  &:insensitive { @include button(insensitive); }
  &:insensitive:active,
  &:insensitive:checked { @include button(insensitive-active); }
}

// More inline toolbar buttons
.inline-toolbar.toolbar GtkToolButton {
  & > .button.flat { @extend %linked_middle; }
  &:first-child > .button.flat { @extend %linked:first-child; }
  &:last-child > .button.flat { @extend %linked:last-child; }
  &:only-child > .button.flat { @extend %linked:only-child; }
}

// Extends for linked buttons
%linked_middle {
  @include linked(button, normal, middle);
  &:active, &:checked { @include linked(button, active, middle); }  
}

%linked {
  @extend %linked_middle;

  &:first-child {
    @include linked(button, normal, left);
    &:active, &:checked { @include linked(button, active, left); }
  }
  &:last-child {
    @include linked(button, normal, right);
    &:active, &:checked { @include linked(button, active, right); }
  }
  &:only-child {
    @include linked(button, normal, single);
    &:active, &:checked { @include linked(button, active, single); }
  }
}

%linked_middle_vertical {
  @include linked(button, normal, middle-vertical);
  &:active, &:checked { @include linked(button, active, middle-vertical); }
}

%linked_vertical {
  @extend %linked_middle_vertical;

  &:first-child {
    @include linked(button, normal, top-vertical);
    &:active, &:checked { @include linked(button, active, top-vertical); }
  }
  &:last-child {
    @include linked(button, normal, bottom-vertical);
    &:active, &:checked { @include linked(button, active, bottom-vertical); }
  }
  &:only-child {
    @include linked(button, normal, single);
    &:active, &:checked { @include linked(button, active, single); }
  }
}

// Linked destructive and suggested action buttons
@each $b_type in (suggested, destructive) {
  %#{$b_type}_linked_middle {
    @include linked(button, normal, middle, $action_type:$b_type);
    &:active, &:checked { @include linked(button, active, middle, $action_type:$b_type); }  
  }

  %#{$b_type}_linked {
    @extend %#{$b_type}_linked_middle;

    &:first-child {
      @include linked(button, normal, left, $action_type:$b_type);
      &:active, &:checked { @include linked(button, active, left, $action_type:$b_type); }
    }
    &:last-child {
      @include linked(button, normal, right, $action_type:$b_type);
      &:active, &:checked { @include linked(button, active, right, $action_type:$b_type); }
    }
    &:only-child {
      @include linked(button, normal, single, $action_type:$b_type);
      &:active, &:checked { @include linked(button, active, single, $action_type:$b_type); }
    }
  }
}

%undecorated_button {
  border-color: transparent;
  border-image: none;
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  text-shadow: none;
  icon-shadow: none;
}

// menu buttons
.menuitem.button.flat {
  @extend %undecorated_button;
  outline-offset: -2px;
  outline-color: transparentize($fg_color, 0.7);
  border: 1px solid transparent;

  &:hover {
    @if $variant=='light' {
      border: 1px solid transparentize(black, 0.8);
      border-bottom-color: transparentize(black, 0.75);
      box-shadow: inset 0 1px $highlight_shadow;
    }
    @else {
      border: 1px solid transparentize(black, 0.6);
      border-bottom-color: transparentize(black, 0.45);
      box-shadow: inset 0 1px $highlight_shadow;
    }
    background-image: linear-gradient(to bottom,
                                      transparentize($button_gradient_color_a, 0.6),
                                      transparentize($button_gradient_color_b, 0.7));
  }
  &:active, &:checked { color: $fg_color; }
  &:active:hover, &:checked:hover {
    color: $button_active_fg;
    outline-color: transparentize($button_active_fg, 0.7);
    box-shadow: inset 0 1px 2px transparentize(black, 0.85);
    background-image: linear-gradient(to bottom,
                                      transparentize($button_active_gradient_color_a, 0.3),
                                      transparentize($button_active_gradient_color_b, 0.3));
    border: 1px solid transparentize(black, 0.5);
    border-top-color: transparentize(black, 0.35);
    text-shadow: 0 -1px transparentize($button_active_text_shadow, 0.3);
  }
}

//
// Links
//
*:link {
  color: $link_color;
  &:visited {
    color: $link_visited_color;
    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 60%); }
  }
  &:hover {
    color: lighten($link_color,10%);
    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 90%); }
  }
  &:active {
    color: $link_color;
    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 80%); }
  }
  &:selected, *:selected & {
    color: mix($selected_fg_color, $selected_bg_color, 80%);
  }
}

.button:link, .button:visited {
  @extend %undecorated_button;
  @extend *:link;
  text-shadow: none;
  &:hover, &:active, &:checked {
    @extend %undecorated_button;
    text-shadow: none;
  }
}

//
// GtkSpinButton
//
.spinbutton {
  .button {
    border-image: none;
    border-width: 0;
    border-radius: 0;
    box-shadow: inset 0 1px $highlight_shadow,
                inset 2px 0 if($variant=='light', transparentize($highlight_shadow, 0.3), transparentize($highlight_shadow, 0.05)),
                inset 1px 0 if($variant=='light', lighten($borders_color, 9%), $borders_color);
    icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
    &:dir(rtl) {
      box-shadow: inset 0 1px $highlight_shadow,
                  inset -2px 0 if($variant=='light', transparentize($highlight_shadow, 0.3), transparentize($highlight_shadow, 0.05)),
                  inset -1px 0 if($variant=='light', lighten($borders_color, 9%), $borders_color);
    }
    &:insensitive {
      box-shadow: inset 1px 0 if($variant=='light', lighten($borders_color, 9%), $borders_color);
      icon-shadow: none; 
      &:dir(rtl) {
        box-shadow: inset -1px 0 if($variant=='light', lighten($borders_color, 9%), $borders_color);
      }
    }
    &:active {
      box-shadow: inset 0 1px 2px transparentize(black, 0.8);
      icon-shadow: 0 -1px $button_active_text_shadow;
    }
  }
  // use linked buttons and entries for vertical spinbuttons, since it works here
  &.vertical, &.vertical:dir(rtl), &.vertical:dir(ltr) {
    .button {
      box-shadow: none;
      &:first-child {
        @extend %linked_vertical:first-child;

        &:active { box-shadow: inset 0 1px 2px transparentize(black, 0.8); }
      }
      &:last-child {
        @extend %linked_vertical:last-child;

        &:active { box-shadow: inset 0 1px 2px transparentize(black, 0.8); }
      }
    }
    &.entry {
      padding-left: 5px;
      padding-right: 5px;
      box-shadow: inset 0 1px $entry_inset;

      @extend %entry_linked_middle_vertical;

      &:insensitive { box-shadow: none; }
    }
  }
}

// special case spinbutton inside linked entries
.linked.vertical > .spinbutton .button:last-child, .linked.vertical > .spinbutton .button,
.linked.vertical > .spinbutton .button:last-child:hover, .linked.vertical > .spinbutton .button:hover,
.linked.vertical > .spinbutton .button:last-child:active, .linked.vertical > .spinbutton .button:active,
.linked.vertical > .spinbutton .button:last-child:insensitive, .linked.vertical > .spinbutton .button:insensitive {
  border-image: none;
  border-width: 0;
  border-radius: 0;
  background-image: none;
  background-color: transparent;
  box-shadow: inset 1px 0 transparentize(black, 0.9);
  icon-shadow: none;
}

.linked.vertical > .spinbutton .button:last-child:dir(rtl), .linked.vertical > .spinbutton .button:dir(rtl),
.linked.vertical > .spinbutton .button:last-child:hover:dir(rtl), .linked.vertical > .spinbutton .button:hover:dir(rtl),
.linked.vertical > .spinbutton .button:last-child:active:dir(rtl), .linked.vertical > .spinbutton .button:active:dir(rtl),
.linked.vertical > .spinbutton .button:last-child:insensitive:dir(rtl), .linked.vertical > .spinbutton .button:insensitive:dir(rtl) {
  box-shadow: inset -1px 0 transparentize(black, 0.9);
}

.linked.vertical > .spinbutton .button:last-child:hover, .linked.vertical > .spinbutton .button:hover {
  color: transparentize($fg_color, 0.5);
}

.linked.vertical > .spinbutton .button:last-child:active, .linked.vertical > .spinbutton .button:active {
  color: transparentize($fg_color, 0.3);
}

//
// ComboBoxes
//
GtkComboBox {
  > .button { padding-top: 3px; padding-bottom: 4px; } // Otherwise combos
                                                       // are bigger then
                                                       // buttons
  -GtkComboBox-arrow-scaling: 0.5;
  -GtkComboBox-shadow-type: none;

  text-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
  icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;

  &:insensitive {
    color: $insensitive_fg_color;
    text-shadow: none;
    icon-shadow: none;
  }
  .menuitem { text-shadow: none; }
  .separator.vertical {
    // always disable separators
    -GtkWidget-wide-separators: true;
    border: none;
  }
  &.combobox-entry .entry { @extend %entry_linked; }
}

.linked > GtkComboBox > .button:dir(ltr),
.linked > GtkComboBox > .button:dir(rtl) {
  @extend %linked_middle;
}

GtkComboBox.combobox-entry .button:first-child,
.linked > GtkComboBox:first-child > .button {
  @extend %linked:first-child;
}

GtkComboBox.combobox-entry .button:last-child,
.linked > GtkComboBox:last-child > .button {
  @extend %linked:last-child;
}

GtkComboBox.combobox-entry .button:only-child,
.linked > GtkComboBox:only-child > .button {
  @extend %linked:only-child;
}

// vertically linked comboboxes
.linked.vertical > GtkComboBoxText > .button,
.linked.vertical > GtkComboBox > .button { @extend %linked_middle_vertical; }
.linked.vertical > GtkComboBoxText:first-child > .button,
.linked.vertical > GtkComboBox:first-child > .button { @extend %linked_vertical:first-child; }
.linked.vertical > GtkComboBoxText:last-child > .button,
.linked.vertical > GtkComboBox:last-child > .button { @extend %linked_vertical:last-child; }
.linked.vertical > GtkComboBoxText:only-child > .button,
.linked.vertical > GtkComboBox:only-child > .button { @extend %linked_vertical:only-child; }

//
// Floating Bar
//
.floating-bar {
  background-image: linear-gradient(to bottom, 
                                    #656668, 
                                    #4B4C4E);
  background-color: #656668;
  border-color: transparentize(black, 0.3);
  color: $selected_fg_color;
  text-shadow: 0 -1px $button_active_text_shadow;
  box-shadow: inset 0 1px lighten(#656668, 9%);
  border-radius: 3px;
  border-width: 1px;
  border-style: solid;

  &.top {
    border-top-width: 0;
    border-top-right-radius: 0;
    border-top-left-radius: 0;
  }
  &.bottom {
    border-bottom-width: 0;
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
  }
  &.right {
    border-right-width: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  &.left {
    border-left-width: 0;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
  .button {
    -GtkButton-image-spacing: 0;
    -GtkButton-inner-border: 0;
    background-color: transparentize($base_color, 1);
    background-image: none;
    border: none;
    icon-shadow: none;
  }
}

//
// Toolbars
//
.toolbar {
  -GtkWidget-window-dragging: true;
  padding: 4px;
  background-color: $bg_color;

  &.menubar {
    border-bottom: 1px solid $borders_color;
    padding: 4px;
  }
  .osd &, &.osd {
    padding: 10px;
    border: 1px solid transparentize(black, 0.25);
    border-radius: 3px;
	  box-shadow: inset 0 1px transparentize(white, 0.9),
		            inset 0 -1px transparentize(black, 0.9);
    background-image: linear-gradient(to bottom, $osd_toolbar_bg_a, $osd_toolbar_bg_b);
    background-color: transparent;
  }
  .separator {
    -GtkWidget-wide-separators: 1;
    -GtkWidget-separator-width: 2px;

    @include _border(header-separator#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 1px, $image-width: 0 1 0 1 / 0 1px 0 1px);
  }
  GtkComboBox .separator {
    -GtkWidget-wide-separators: true;
    border: none;
  }
}

// primary toolbars
.primary-toolbar {
  -GtkWidget-window-dragging: true;
  padding: 4px;
  color: $wm_title;
  background-image: linear-gradient(to bottom,
                                    $primary_toolbar_bg_a,
                                    $primary_toolbar_bg_b);
  border-width: 0 0 1px 0;
  border-style: solid;
  border-image: linear-gradient(to bottom, $primary_toolbar_bg_a,
                                           if($darker=='false', $borders_color, nth($_borders_color, 3))) 1 0 1 0; //temporary hack for rhythmbox 3.1

  &:insensitive {
    background-image: none;
    background-color: darken($bg_color, 3%);
    border-color: darken($bg_color, 9%);
    text-shadow: none;
	  color: $insensitive_fg_color;
  }
  .separator {
    -GtkWidget-wide-separators: 1;
    -GtkWidget-separator-width: 2px;

    @include _border(header-separator#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 1px, $image-width: 0 1 0 1 / 0 1px 0 1px);
  }
  // make widgets on dark primary toolbars dark
  @if $darker=='true' { @extend %dark_widgets; }
}

//searchbar, location-bar & inline-toolbar
.inline-toolbar,
.inline-toolbar.toolbar {
  border-width: 0 1px 1px;
  padding: 3px;
  border-radius: 0  0 3px 3px;
}

.action-bar,
.inline-toolbar,
.inline-toolbar.toolbar {
  border-color: $borders_color;
  border-style: solid;

  @extend %action-bar-background;
}

%action-bar-background {
  background-color: transparent;
  box-shadow: inset 0 1px $highlight_shadow;

  @if $variant==light {
    background-image: linear-gradient(to bottom,
                                      $bg_color,
                                      darken($bg_color, 4%));
  }
  @else {
    background-image: linear-gradient(to bottom,
                                      lighten($bg_color, 1%),
                                      darken($bg_color, 2%));
  }
}

.search-bar,
.location-bar {
  padding: 3px; 
  border-width: 0 0 1px;
  border-style: solid;
  border-color: $borders_color;
  background-color: if($variant=='light', lighten($bg_color, 1%), darken($bg_color, 2.3%));
  box-shadow: inset 0 3px 3px -1px if($variant=='light', rgba(0, 0, 0, 0.1), rgba(0,0,0,0.17));
}

//
// Header bars
//
.header-bar {
  padding: 6px 6px 5px 6px;
  color: $wm_title;
  border-width: 0 0 1px;
  border-style: solid;
  border-radius: 0;
  border-color: if($darker=='false', $borders_color, nth($_borders_color, 3));
  background-color: transparent;
  background-image: linear-gradient(to bottom,
                                    $primary_toolbar_bg_a,
                                    $primary_toolbar_bg_b);

  .title {
    color: $wm_title;
    font-weight: bold;
    padding: 0px 12px;
    text-shadow: 0 #{$shadow_pos * $darker_shadow_pos}px $wm_title_shadow;
  
    &:backdrop { opacity: 0.5; }
  }
  .subtitle {
    color: $wm_title;
    font-size: 82%;
    padding: 0 12px;
    @extend .dim-label;

    &:backdrop { opacity: 0.3; }
  }
  // Fix pushed buttons which inherit their color from .title
  .title.button:active, .title.button:checked,
  .button:active GtkLabel.title, .button:checked GtkLabel.title {
    color: $button_active_fg;
    text-shadow: 0 -1px $button_active_text_shadow;
    icon-shadow: 0 -1px $button_active_text_shadow;
  }
  // Separators
  & GtkBox > .separator.vertical {
    -GtkWidget-wide-separators: 1;
    -GtkWidget-separator-width: 2px;

    @include _border(header-separator#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 1px, $image-width: 0 1 0 1 / 0 1px 0 1px);
  }
  .right .header-bar-separator,
  & > GtkBox.right > .separator.vertical,
  .left:dir(rtl) .header-bar-separator,
  & > GtkBox.left:dir(rtl) > .separator.vertical {
    -GtkWidget-wide-separators: 1;
    -GtkWidget-separator-width: 9px;

    @include _border(header-separator-right#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 4px 0 1px, $image-width: 0 4 0 1 / 0 4px 0 1px);
  }
  .left .header-bar-separator,
  & > GtkBox.left > .separator.vertical,
  .right:dir(rtl) .header-bar-separator,
  & > GtkBox.right:dir(rtl) > .separator.vertical {
    -GtkWidget-wide-separators: 1;
    -GtkWidget-separator-width: 9px;

    @include _border(header-separator-left#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 4px, $image-width: 0 1 0 4 / 0 1px 0 4px);
  }
  // Selectionmode
  &.selection-mode {
    color: $selected_fg_color;
    text-shadow: 0 -1px $selection_button_text_shadow;
    border-color: $selection_toolbar_border;
    background-image: linear-gradient(to bottom,
                                      $selection_toolbar_bg_a,
                                      $selection_toolbar_bg_b);
    box-shadow: inset 0 1px if($variant=='light', lighten($selection_toolbar_bg_a, 10%), transparentize(white, 0.7));
    padding: 6px 6px 6px 6px;
    .title {
      color: $selected_fg_color;
      text-shadow: 0 -1px $selection_button_text_shadow;
     }
    .subtitle { 
      color: $selected_fg_color;
      @extend .dim-label;
    }
    // Separators
    & GtkBox > .separator.vertical {
      -GtkWidget-wide-separators: 1;
      -GtkWidget-separator-width: 2px;

      @include _border(header-separator-selectionmode#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 1px, $image-width: 0 1 0 1 / 0 1px 0 1px);
    }
    .right .header-bar-separator,
    & > GtkBox.right > .separator.vertical,
    .left:dir(rtl) .header-bar-separator,
    & > GtkBox.left:dir(rtl) > .separator.vertical {
      -GtkWidget-wide-separators: 1;
      -GtkWidget-separator-width: 9px;

      @include _border(header-separator-selectionmode-right#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 4px 0 1px, $image-width: 0 4 0 1 / 0 4px 0 1px);
    }
    .left .header-bar-separator,
    & > GtkBox.left > .separator.vertical,
    .right:dir(rtl) .header-bar-separator,
    & > GtkBox.right:dir(rtl) > .separator.vertical {
      -GtkWidget-wide-separators: 1;
      -GtkWidget-separator-width: 9px;

      @include _border(header-separator-selectionmode-left#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 4px, $image-width: 0 1 0 4 / 0 1px 0 4px);
    }
    // Selectionmode buttons
    .button {
      @include button(selection-mode, $darker);
      &.flat { @include button(undecorated); }
      &:hover { @include button(selection-mode-hover, $darker); }
      &:active, &:checked { @include button(selection-mode-active, $darker); }
      &.flat:insensitive {
        @include button(undecorated);
      }
      &:insensitive {
        @include button(selection-mode-insensitive, $darker);
        &:active, &:checked {
          @include button(selection-mode-insensitive-active, $darker);
        }
      }
      &.suggested-action {
        @include button(normal, $darker);
        &:hover { @include button(hover, $darker); }
        &:active, &:checked {
          @include button(active, $darker);
          @include _border(button-active-border-suggested#{$darker_asset_suffix});
        }
        &:insensitive { @include button(insensitive, $darker); }
      }
    }
    .selection-menu {
      border-image: none;
      border-color: transparentize($selected_bg_color,1);
      background-image: linear-gradient(to bottom,
                        transparentize($selected_bg_color,1));
      box-shadow: none;
      padding-left: 10px;
      padding-right: 10px;
      GtkArrow { -GtkArrow-arrow-scaling: 1; }
      .arrow {
        -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
        color: transparentize($selected_fg_color,0.5);
        icon-shadow: none;
      }
    }
  }
  &.selection-mode .linked .button,
  &.selection-mode .linked .button:hover { @extend %header_suggested_linked }

  &.selection-mode .linked .button.suggested-action,
  &.selection-mode .linked .button.suggested-action:hover { @extend %header_linked }

  @if $darker=='true' {

    > .separator, .titlebar > .separator { color: rgba(0, 0, 0, 0.3); } // Separator in Gnome Tweak Tool

    // make widgets in dark headerbars dark
    @extend %dark_widgets;
  }

  .tiled &, .maximized & {
    border-radius: 0; // squared corners when the window is max'd or tiled
  }
  &.default-decoration {
    padding: 4px;
    .button { padding: 4px; } // FIXME is this okay?
  }
}
// titlebar needs to be styled differently
.titlebar {
  padding-left: 6px;
  padding-right: 6px;
  color: $wm_title;
  border-width: 0 0 1px;
  border-style: solid;
  border-radius: 3px 3px 0 0;
  border-color: if($darker=='false', $borders_color, nth($_borders_color, 3));
  background-color: transparent;
  background-image: linear-gradient(to bottom,
                                    $wm_bg_a,
                                    $wm_bg_b);
  box-shadow: inset 0 1px $wm_highlight;
}

// Extends for widgets in dark Headerbars and toolbars
%dark_widgets {

// Entries
  .entry {
    @include entry(normal, $dark:'true');
  
    &.image { color: inherit; }

    &:focus { @include entry(focus, $dark:'true'); }
    &:insensitive { @include entry(insensitive, $dark:'true'); }

    &.progressbar {
      margin: 0 2px 3px 2px;
      border-radius: 0;
      border-width: 0 0 2px;
      border-color: $selected_bg_color;
      border-style: solid;
      background-image: none;
      background-color: transparent;
      box-shadow: none;
      border-image: none;
    }
  }
  .linked .entry { @extend %header_entry_linked; }

// Buttons
  .button {
    @include button(normal, $dark:'true');

    &.flat { 
      @include button(undecorated);
      text-shadow: 0 -1px nth($_light_text_icon_shadow, 2);
      icon-shadow: 0 -1px nth($_light_text_icon_shadow, 2);
    }
    &:focus { @include button(focus, $dark:'true'); }
    &:hover { @include button(hover, $dark:'true'); }
    &:active, &:checked { @include button(active, $dark:'true'); }
    &:insensitive { @include button(insensitive, $dark:'true'); }
    &.flat:insensitive { @include button(undecorated); }
    &:insensitive:active, &:insensitive:checked { @include button(insensitive-active, $dark:'true'); }

  // Suggested and Destructive Action buttons
    $_destructive: $destructive_color_a, $_destructive_color_b;
    $_suggested: nth($_suggested_color_a, 2), nth($_suggested_color_b, 2);

    @each $b_type, $b_color in (suggested, $_suggested),
                                (destructive, $_destructive) {
      &.#{$b_type}-action {
        color: $selected_fg_color;
        outline-color: transparentize($selected_fg_color, 0.7);
        background-image: linear-gradient(to bottom, nth($b_color, 1), nth($b_color, 2));

        text-shadow: 0 -1px $action_button_shadow;
        icon-shadow: 0 -1px $action_button_shadow;

        @include _border(button-normal-border-#{$b_type}-dark);

        &:hover {
          background-image: linear-gradient(to bottom, lighten(nth($b_color, 1), 4%), lighten(nth($b_color, 2), 2%));
        }
        &:active, &:checked {
          color: $selected_fg_color;
          background-image: linear-gradient(to bottom, darken(nth($b_color, 2), 5%), darken(nth($b_color, 1), 5%));

          @include _border(button-active-border-#{$b_type}-dark);
        }
        &:insensitive {
          color: transparentize($selected_fg_color, 0.4);
          background-image: linear-gradient(to bottom, transparentize(nth($b_color, 1), 0.2));

          text-shadow: none;
          icon-shadow: none;

          > GtkLabel, GtkLabel { color: inherit; }

          &:active, &:checked {
            background-image: linear-gradient(to bottom, transparentize(nth($b_color, 1), 0.1));

            > GtkLabel, GtkLabel { color: inherit; }
          }
        }
      }
    }
  }
  .linked .button,
  .linked .button:hover { @extend %header_linked; }

  .linked .button.suggested-action,
  .linked .button.suggested-action:hover { @extend %header_suggested_linked; }

  .linked .button.destructive-action,
  .linked .button.destructive-action:hover { @extend %header_destructive_linked; }

// Comboboxes
  GtkComboBox {
    color: nth($_fg_color, 2);

    text-shadow: 0 -1px nth($_light_text_icon_shadow, 2);
    icon-shadow: 0 -1px nth($_light_text_icon_shadow, 2);

    &:insensitive {
      color: nth($_insensitive_fg_color, 2);

      text-shadow: none;
      icon-shadow: none;
    }
    .separator {
      border: none;
    }
    &.combobox-entry .entry { @extend %header_entry_linked; }
  }

  .linked > GtkComboBox > .button:dir(ltr),
  .linked > GtkComboBox > .button:dir(rtl) {
    @extend %header_linked_middle;
  }

  GtkComboBox.combobox-entry .button:first-child,
  .linked > GtkComboBox:first-child > .button {
    @extend %header_linked:first-child;
  }

  GtkComboBox.combobox-entry .button:last-child,
  .linked > GtkComboBox:last-child > .button {
    @extend %header_linked:last-child;
  }

  GtkComboBox.combobox-entry .button:only-child,
  .linked > GtkComboBox:only-child > .button {
    @extend %header_linked:only-child;
  }

// Spinbuttons
  .spinbutton {
    .button {
      border-image: none;
      border-width: 0;
      border-radius: 0;
      box-shadow: inset 0 1px nth($_highlight_shadow, 2),
                  inset 2px 0 transparentize(nth($_highlight_shadow, 2), 0.05),
                  inset 1px 0 nth($_borders_color, 2);
      icon-shadow: 0 -1px nth($_light_text_icon_shadow, 2);
      &:dir(rtl) {
        box-shadow: inset 0 1px nth($_highlight_shadow, 2),
                    inset -2px 0 transparentize(nth($_highlight_shadow, 2), 0.05),
                    inset -1px 0 nth($_borders_color, 2);
      }
      &:insensitive {
        box-shadow: inset 1px 0 nth($_borders_color, 2);
        icon-shadow: none; 
        &:dir(rtl) {
          box-shadow: inset -1px 0 nth($_borders_color, 2);
        }
      }
      &:active {
        box-shadow: inset 0 1px 2px transparentize(black, 0.8);
        icon-shadow: 0 -1px $button_active_text_shadow;
      }
    }
  }

// Pane Separator
  .pane-separator { @include handle($dark:'true'); }

// Scale
  .scale.trough {
    margin: 6px 0 5px 0;
    background-image: linear-gradient(to bottom,
                                      nth($_trough_bg_color_a, 2),
                                      nth($_trough_bg_color_b, 2));
    @include _border(scale-trough-border-dark, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

    &.highlight { // make the highlight a little lighter here for better contrast
      background-image: linear-gradient(to bottom,
                                        lighten(nth($_scale_highlight_bg_a, 2), 5%),
                                        lighten(nth($_scale_highlight_bg_b, 2), 5%));
      @include _border(scale-highlight-border-dark, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

      &:insensitive {
        background-image: linear-gradient(to bottom,
                                          darken(nth($_scale_highlight_bg_b, 2), 9%),
                                          darken(nth($_scale_highlight_bg_b, 2), 4%));
      }
    }
    &:insensitive {
      box-shadow: inset 0 1px 2px transparentize(black, 0.9);

      background-image: linear-gradient(to bottom,
                                        darken(nth($_scale_highlight_bg_b, 2), 11%),
                                        darken(nth($_scale_highlight_bg_b, 2), 8%));
    }
  }

// Scale sliders
  @each $k,$l in ('',''),
                 (':hover','-hover'),
                 (':active','-active'),
                 (':insensitive','-insensitive') {

    // load scale sliders from .png files in assets directory

    .scale.slider#{$k} {
      background-image: -gtk-scaled(url("assets/slider#{$l}-dark.png"),url("assets/slider#{$l}-dark@2.png"));
    }
  }

// Progressbars
  GtkProgressBar { color: transparentize(nth($_fg_color, 2), 0.3); }

  GtkProgressBar.trough {
    padding: 2px;
    box-shadow: inset 0 1px 1px transparentize(black, 0.9);
    background-image: linear-gradient(to bottom,
                                      darken(nth($_trough_bg_color_a, 2), 2%),
                                      darken(nth($_trough_bg_color_b, 2), 5%));
    @include _border(trough-border-dark, $radius: 2px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);
  }

// Switch
  @each $k,$l in ('',''),
                 (':active','-active'),
                 (':insensitive','-insensitive'),
                 (':active:insensitive','-active-insensitive') {

    // load switch troughs from .png files in assets directory

    GtkSwitch.trough#{$k} {
      background-image: -gtk-scaled(url("assets/switch#{$l}-dark.png"),url("assets/switch#{$l}-dark@2.png"));
    }

    // load switch sliders from .png files in assets directory
    // only normal and insensitive states
    @if $k =='' or $k ==':insensitive' {
      GtkSwitch.slider#{$k} {
        background-image: -gtk-scaled(url("assets/switch-slider#{$l}-dark.png"),url("assets/switch-slider#{$l}-dark@2.png"));
      }
    }
  }

  GtkColorSwatch {
    border-color: nth($_borders_color, 2);

    &:hover { border-color: nth($_borders_color, 2); }
  }

  GtkColorButton.button {
    padding: 4px; // Uniform padding on the GtkColorButton
    GtkColorSwatch {
      border-radius: 1.5px;
      box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.2), 0 1px nth($_highlight_shadow, 2);
    }
  }
}

// Extends for dark linked entries
%header_entry_linked_middle {
  @include linked(entry, normal, middle, $dark:$darker);
  &:focus { @include linked(entry, focused, middle, $dark:$darker) }  
}

%header_entry_linked {
  @extend %header_entry_linked_middle;

  &:first-child {
    @include linked(entry, normal, left, $dark:$darker);
    &:focus { @include linked(entry, focused, left, $dark:$darker) }
  }
  &:last-child {
    @include linked(entry, normal, right, $dark:$darker);
    &:focus { @include linked(entry, focused, right, $dark:$darker) }
  }
  &:only-child {
    @include linked(entry, normal, single, $dark:$darker);
    &:focus { @include linked(entry, focused, single, $dark:$darker); }
  }
}

// Extends for dark linked buttons
%header_linked_middle {
  @include linked(button, normal, middle, $dark:$darker);
  &:active, &:checked { @include linked(button, active, middle, $dark:$darker) }  
}

%header_linked {
  @extend %header_linked_middle;

  &:first-child {
    @include linked(button, normal, left, $dark:$darker);
    &:active, &:checked { @include linked(button, active, left, $dark:$darker) }
  }
  &:last-child {
    @include linked(button, normal, right, $dark:$darker);
    &:active, &:checked { @include linked(button, active, right, $dark:$darker) }
  }
  &:only-child {
    @include linked(button, normal, single, $dark:$darker);
    &:active, &:checked { @include linked(button, active, single, $dark:$darker); }
  }
}

// Headerbar linked destructive and suggested action buttons
@each $b_type in (suggested, destructive) {
  %header_#{$b_type}_linked_middle {
    @include linked(button, normal, middle, $action_type:$b_type, $dark:$darker);
    &:active, &:checked { @include linked(button, active, middle, $action_type:$b_type, $dark:$darker); }  
  }

  %header_#{$b_type}_linked {
    @extend %header_#{$b_type}_linked_middle;

    &:first-child {
      @include linked(button, normal, left, $action_type:$b_type, $dark:$darker);
      &:active, &:checked { @include linked(button, active, left, $action_type:$b_type, $dark:$darker); }
    }
    &:last-child {
      @include linked(button, normal, right, $action_type:$b_type, $dark:$darker);
      &:active, &:checked { @include linked(button, active, right, $action_type:$b_type, $dark:$darker); }
    }
    &:only-child {
      @include linked(button, normal, single, $action_type:$b_type, $dark:$darker);
      &:active, &:checked { @include linked(button, active, single, $action_type:$b_type, $dark:$darker); }
    }
  }
}

.primary-toolbar .button,                             // tango icons don't need shadows
.primary-toolbar .button.flat { icon-shadow: none; }  // defined here so it doesn't get overriden

//
// Pathbars
//
.path-bar .button,
.path-bar .button:first-child,
.path-bar .button:last-child,
.path-bar .button:only-child,
.path-bar .button.text-button {
  padding-left: 8px;
  padding-right: 8px; }

// the following is for spacing the icon and the label inside the home button
.path-bar .button GtkLabel:last-child { padding-left: 2px; }
.path-bar .button GtkLabel:first-child { padding-right: 2px; }
.path-bar .button GtkLabel:only-child { padding-right: 0; padding-left: 0; }

//
// Tree Views *
//
GtkTreeView.view { // treeview grid lines and expanders, unfortunatelly
                   // the tree lines color can't be set
  -GtkTreeView-grid-line-width: 1;
  -GtkTreeView-grid-line-pattern: '';
  -GtkTreeView-tree-line-width: 1;
  -GtkTreeView-tree-line-pattern: '';
  -GtkTreeView-expander-size: 16;
  border-color: transparentize(black, 0.87); // this is actually the line color
  // :selected is ignored hence no style for it

  &:insensitive {
    color: $insensitive_fg_color;

    &:selected { color: mix($selected_fg_color, $selected_bg_color, 50%); }
  }
  &.expander {
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    color: $fg_color;

    &:hover { color: transparentize($fg_color, 0.5); }

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 80%);
      &:hover { color: $selected_fg_color; }
    }

    &:checked {
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }
  }
  // progressbar in treeviews
  &.progressbar {
    color: $selected_fg_color;
    border-radius: 2px;
    border: 1px solid $progressbar_border;
    background-image: linear-gradient(to bottom,
                                      $progressbar_background_a,
                                      $progressbar_background_b);

    box-shadow: inset 0 1px $progressbar_highlight;

    text-shadow: none;
    icon-shadow: none;

    &:selected { @extend GtkTreeView.view.progressbar }
  }
  // progressbar trough in treeviews
  &.trough {
    padding: 0 0 1px 0;
    color: $selected_fg_color;
    box-shadow: inset 0 1px 1px transparentize(black, 0.9);
    background-image: linear-gradient(to bottom,
                                      if($variant=='light', darken($trough_bg_color_a, 5%), darken($trough_bg_color_a, 2%)),
                                      if($variant=='light', darken($trough_bg_color_b, 11%), darken($trough_bg_color_b, 5%)));
    @include _border(trough-border#{$asset_suffix}, $radius: 1px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);

    &:selected {
      background-image: linear-gradient(to bottom,
                                        if($variant=='light', transparentize(darken($trough_bg_color_a, 5%), 0.2), transparentize(darken($trough_bg_color_a, 2%), 0.2)),
                                        if($variant=='light', transparentize(darken($trough_bg_color_b, 11%), 0.2), transparentize(darken($trough_bg_color_b, 5%), 0.2)));
      @if $variant == 'light' {
        @include _border(trough-border-selected, $radius: 1px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);
      }
    }
  }
  &.dnd {
    border-style: solid none;
    border-width: 1px;
    border-color: $selected_bg_color;
  }
}

GtkIconView.cell:selected,
GtkIconView.cell:selected:focus {
    border-radius: 2px;
    border-style: none;
    background-image: none;
    @extend %selected_items;
}

column-header {
  .button {
    @extend %column_header_button;
    color: $fg_color;
    background-color: $base_color;
    //font-weight: bold;
    text-shadow: none;
    box-shadow: none;
    &:hover {
      @extend %column_header_button;
      color: mix($base_color, $fg_color, 40%);
      box-shadow: none;
      transition: none; //I shouldn't need this
    }
    &:active {
      @extend %column_header_button;
      color: $fg_color;
      text-shadow: none;
      icon-shadow: none;
      transition: none; //I shouldn't need this
    }
    &.dnd {
      @extend column-header.button.dnd;
    }
  }
  &:last-child .button,
  &:last-child.button { //treeview-like derived widgets in Banshee and Evolution
    border-right-style: none;
  }
}

column-header.button.dnd { // for treeview-like derive widgets
  transition: none;
  color: $selected_bg_color;
  box-shadow: inset 1px 1px 0 1px $selected_bg_color,
              inset -1px 0 0 1px $selected_bg_color,
              inset 1px 1px $base_color,
              inset -1px 0 $base_color;
  &:active { @extend column-header.button.dnd; }
  &:selected { @extend column-header.button.dnd; }
  &:hover { @extend column-header.button.dnd; }
}

%column_header_button {
  padding: 3px 6px;
  border: 1px solid transparentize($borders_color, 0.6);
  border-style: none solid solid none;
  border-image: none;
  border-radius: 0;
  background-image: none;
  text-shadow: none;
  &:focus {
    border: 1px solid transparentize($borders_color, 0.6);
    border-style: none solid solid none;
    border-image: none;
    border-radius: 0;
  }
  &:insensitive {
    border: 1px solid transparentize($borders_color, 0.6);
    border-style: none solid solid none;
    border-image: none;
    background-image: none;
  }
}

//
// Menus
//
.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0px;
  color: $wm_title;
  background-color: $primary_toolbar_bg_a;
  & > .menuitem {
    padding: 4px 8px;
    text-shadow: 0 #{$shadow_pos * $darker_shadow_pos}px $wm_title_shadow;
    &:hover { //Seems like it :hover even with keyboard focus
      background-color: $base_color;
      color: $fg_color;
      border-radius: 3px 3px 0 0;
      text-shadow: none;
    }
    &:insensitive {
      color: if($darker=='false', $insensitive_fg_color, nth($_insensitive_fg_color, 2));
      box-shadow: none;
      text-shadow: none;

      > GtkLabel { color: inherit; }
    }
  }
}

.menu {
  margin: 4px;
  padding: 3px 0;
  background-color: if($variant=='light', $base_color, darken($base_color, 2%));
  border: 1px solid $borders_color;
  .csd & { border: none; }
  .menuitem {
    text-shadow: none;
    icon-shadow: none;
    padding: 4px;
    &:hover {
      @extend %selected_gradient;
    }
    //submenu indicators
    &.arrow { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    &.arrow:dir(rtl) {-gtk-icon-source:-gtk-icontheme('pan-end-symbolic-rtl'); }
  }
  // overflow buttons
  &.button {
    @extend %undecorated_button;
    border-style: none;
    border-radius: 0;
    &.top { border-bottom: 1px solid mix($fg_color, $base_color, 10%); }
    &.bottom { border-top: 1px solid mix($fg_color, $base_color, 10%); }
    &:hover { background-color: mix($fg_color, $base_color, 10%); }
    &:insensitive {
      color: transparent;
      background-color: transparent;
      border-color: transparent ;
    }
  }
}

.menuitem .accelerator { color: gtkalpha(currentColor,0.7); }

//
// Popovers
//
.popover {
  background-clip: initial;
  margin: 10px;
  padding: 2px;
  border: 1px solid $borders-color;
  border-radius: 3px;
  background-color: if($variant=='light', darken($base_color, 2%), mix($bg_color,$base_color, 80%));

  box-shadow: 0 1px 5px $wm_shadow;

  text-shadow: none;
  icon-shadow: none;

  .list { background-color: $base_color; }

  & > .list,
  & > .view,
  & > .toolbar,
  &.osd > .toolbar {
    border: none;
    background: none;
    box-shadow: none;
  }
  &.osd {
    background-clip: border-box;
    background-color: opacify($osd_bg_color, 0.15);
    border: 1px solid $osd_borders_color;
    box-shadow: none;
  }
  .button.flat,
  .button.flat:hover {
    transition: none;
  }
}

//touch selection handlebars for the Popover.osd above
.entry.cursor-handle,
.cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;
  &.top { -gtk-icon-source: -gtk-icontheme('selection-start-symbolic'); }
  &.bottom { -gtk-icon-source: -gtk-icontheme('selection-end-symbolic'); }
}

//
// Notebooks and Tabs
//
.notebook {
  padding: 0;
  background-color: $notebook_bg_color;
  -GtkNotebook-initial-gap: 10;
  -GtkNotebook-arrow-spacing: 5;
  -GtkNotebook-tab-curvature: 0;
  -GtkNotebook-tab-overlap: 1;
  -GtkNotebook-has-tab-gap: false;
  -GtkWidget-focus-padding: 0;
  -GtkWidget-focus-line-width: 0;
  transition: all 200ms $ease-out-quad;
  &.frame {
    border: 1px solid $borders_color;
    border-radius: 2px;
    // FIXME doesn't work
    &.top {
      border-top-width: 0;
      border-top-left-radius: 0;
	    border-top-right-radius: 0;
    }
    &.bottom {
      border-bottom-width: 0;
      border-bottom-left-radius: 0;
	    border-bottom-right-radius: 0;
    }
    &.right {
      border-right-width: 0;
	    border-top-right-radius: 0;
	    border-bottom-right-radius: 0;
    }
    &.left {
      border-left-width: 0;
	    border-top-left-radius: 0;
	    border-bottom-left-radius: 0;
    }
  }
  &.header {
    // FIXME: double borders in some case, can't fix it w/o a class tho
    // FIXME: doesn't work on dark var
    background-color: if($variant=='light', $notebook_bg_color, darken($notebook_bg_color, 2.5%));

    // this is the shading of the header behind the tabs
    &.frame {
      border: 1px solid $borders_color;
      &.top {
        border-bottom-width: 0;
	      border-bottom-left-radius: 0;
	      border-bottom-right-radius: 0;
      }
      &.bottom {
        border-top-width: 0;
	      border-top-left-radius: 0;
	      border-top-right-radius: 0;
      }
      &.right {
        border-left-width: 0;
	      border-top-left-radius: 0;
	      border-bottom-left-radius: 0;
      }
      &.left {
        border-right-width: 0;
	      border-top-right-radius: 0;
	      border-bottom-right-radius: 0;
      }
    }

    $_header_shade: inset 0 2px 3px -1px transparentize(black, 0.85);
    &.top {
      box-shadow: $_header_shade,
                  inset 0 -1px transparentize($borders_color, 0.5); // border
    }
    &.bottom {
      box-shadow: $_header_shade,
                  inset 0 1px transparentize($borders_color, 0.5);
    }
    &.right {
      box-shadow: $_header_shade,
                  inset 1px 0 transparentize($borders_color, 0.5);
    }
    &.left {
      box-shadow: $_header_shade,
                  inset -1px 0 transparentize($borders_color, 0.5);
    }
  }
  tab {
    border: 1px solid transparent;
    background-color: transparent;

    outline-offset: 0;

    &.top, &.bottom,
    &.left, &.right { padding: 5px 20px; }

    &.reorderable-page {
      &.top, &.bottom {
        padding-left: 12px;  // for a nicer close button
        padding-right: 12px; // placement
      }
    }
    &.top {
      border-width: 0 1px 1px 1px;
      border-radius: 0 0 2px 2px;
    }
    &.bottom {
      border-width: 1px 1px 0 1px;
      border-radius: 2px 2px 0 0;
    }
    &.left {
      border-width: 1px 1px 1px 0; 
      border-radius: 0;
    }
    &.right {
      border-width: 1px 0 1px 1px;
      border-radius: 0;
    }

    //here's the interesting stuff
    &:hover, &.prelight-page {
      border-color: $borders_color;
      background-color: if($variant=='light', transparentize(black, 0.975), transparentize(white, 0.975));
    }
    &:active, &.active-page {
      border-color: $borders_color;

      &:hover { border-color: darken($borders_color, 5%); }
    }
    @each $_tab, $_border in (top, bottom),
                             (bottom, top),
                             (left, right),
                             (right, left) {
      &.reorderable-page.#{$_tab} {
        &:active, &.active-page {
          background-image: linear-gradient(to $_border,
                                            $notebook_tab_gradient_a,
				                        					  $notebook_tab_gradient_b);
          border-image: none;
        }
      }
      &.#{$_tab} {
        border-image: linear-gradient(to $_border,
                                      transparentize($borders_color, 0.3),
                                      transparentize($bg_color, 1));

        &:hover, &.prelight-page { border-image: none; }

        &:active, &.active-page {
          @if $_tab == top {
            background-image: linear-gradient(to bottom,
                                              transparentize($notebook_tab_gradient_a, 1) 1px,
									                            $notebook_tab_gradient_a 2px,
                                              $notebook_tab_gradient_b);
          }
          @else {
            background-image: linear-gradient(to $_border,
                                              transparentize($notebook_tab_gradient_b, 1) 1px,
									                            $notebook_tab_gradient_b 2px,
                                              $notebook_tab_gradient_a);
          }
          border-image: none;
        }
      }
    }
    &.top, &.bottom { border-image-slice: 0 1 0 1; }
    &.left, &.right { border-image-slice: 1 0 1 0; }

    //tab text
    GtkLabel {
      padding: 0 2px; // needed for a nicer focus ring
      //font-weight: bold;
      color: mix($fg_color, $bg_color, 60%);
      text-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
    }
    .prelight-page GtkLabel, GtkLabel.prelight-page {
      // prelight tab text
      color: mix($fg_color, $bg_color, 85%);
    }
    .active-page GtkLabel, GtkLabel.active-page {
      // active tab text
      color: $fg_color;
    }
    // tab close button
    .button { //tab close button
      padding: 0;
      border: 1px solid transparent;
      @extend %undecorated_button;
      icon-shadow: none;
      color: mix($fg_color, $bg_color, 35%);
      icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
      &:hover {
        border: 1px solid if($variant=='light', $borders_color, transparentize(white, 0.9));
        color: lighten(red, 10%);
        background-image: none;
        box-shadow: none;
      }
      &:active {
        border: 1px solid $borders_color;
        color: $fg_color;
        background-image: linear-gradient(to bottom, darken($bg_color, 10%), darken($bg_color, 5%));
        box-shadow: inset 0 1px rgba(0, 0, 0, 0.07), inset 0 2px 1px -2px rgba(0, 0, 0, 0.6);
        icon-shadow: none;
      }
      & > GtkImage { // this is a hack which makes tabs grow
        padding: 2px;
      }
    }
    .button, .button.flat { transition-duration: 100ms; }
  }
  & .prelight-page .button, & tab.prelight-page .button, 
  & .active-page .button, & tab.active-page .button {
    color: $fg_color;
  }
  &.arrow {
    color: mix($fg_color, $bg_color, 80%);
    &:hover { color: mix($fg_color, $bg_color, 60%); }
    &:active { color: $fg_color; }
    &:insensitive {
      color: transparentize($insensitive_fg_color, 0.3);
    }
  }
}

//
// Scrollbars
//
.scrollbar {
  background-clip: padding-box;
  background-image: none;
  border-style: solid;

  -GtkRange-trough-border: 0;
  -GtkScrollbar-has-backward-stepper: false;
  -GtkScrollbar-has-forward-stepper: false;
  -GtkRange-slider-width: 15;
  -GtkScrollbar-min-slider-length: 64;
  -GtkRange-stepper-spacing: 0;
  -GtkRange-trough-under-steppers: 1;

  .button { border: none; }

  &.trough {
    @include _border(scrollbar-trough#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px);

    &:dir(rtl) { @include _border(scrollbar-trough-rtl#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px); }
    &.horizontal { @include _border(scrollbar-trough-horizontal#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 8px 7px 8px, $image-width: 8 8 7 8 / 8px 8px 7px 8px); }
  }
  &.slider {
    @include _border(scrollbar-slider#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px);

    &:dir(rtl) { @include _border(scrollbar-slider-rtl#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px); }

    &:hover, &:insensitive {
      @include _border(scrollbar-slider-hover#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px);

      &:dir(rtl) { @include _border(scrollbar-slider-rtl-hover#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px); }
    }
    &:active {
      @include _border(scrollbar-slider-active#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px);

      &:dir(rtl) { @include _border(scrollbar-slider-rtl-active#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 7px 8px 8px, $image-width: 8 7 8 8 / 8px 7px 8px 8px); }
    }

    &.horizontal {
      @include _border(scrollbar-slider-horizontal#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 8px 7px 8px, $image-width: 8 8 7 8 / 8px 8px 7px 8px);

      &:hover, &:insensitive { @include _border(scrollbar-slider-horizontal-hover#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 8px 7px 8px, $image-width: 8 8 7 8 / 8px 8px 7px 8px); }
      &:active { @include _border(scrollbar-slider-horizontal-active#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 8px 8px 7px 8px, $image-width: 8 8 7 8 / 8px 8px 7px 8px); }
    }
  }
}

.scrollbars-junction,
.scrollbars-junction.frame { // the small square between two scrollbars
	background-color: $bg_color;
	background-image: none;
	border: none;
}

//
// Switch
//
GtkSwitch {
  font: 1;
  -GtkSwitch-slider-width: 39;
  outline-color: transparent;

  &.trough, &.slider {
    background-repeat: no-repeat;
    background-position: 0 center;
    color: transparent;
    border-color: transparent;
    border-image: none;
    border-style: none;
    box-shadow: none;
  }
}

$_list: ('','');
@if $variant == 'light' { $_list: ('',''), ('.list-row:selected ','-selected'); } // special cased switches in selected list-rows only in light variant

@each $i,$j in $_list {

  @each $k,$l in ('',''),
                 (':active','-active'),
                 (':insensitive','-insensitive'),
                 (':active:insensitive','-active-insensitive') {

    // load switch troughs from .png files in assets directory

    #{$i}GtkSwitch.trough#{$k} {
      background-image: -gtk-scaled(url("assets/switch#{$l}#{$j}#{$asset_suffix}.png"),url("assets/switch#{$l}#{$j}#{$asset_suffix}@2.png"));
    }

    // load switch sliders from .png files in assets directory
    // only normal and insensitive states and no special case for selected list-rows
    @if $i =='' {
      @if $k =='' or $k ==':insensitive' {
        #{$i}GtkSwitch.slider#{$k} {
          background-image: -gtk-scaled(url("assets/switch-slider#{$l}#{$j}#{$asset_suffix}.png"),url("assets/switch-slider#{$l}#{$j}#{$asset_suffix}@2.png"));
        }
      }
    }
  }
}

//
// Check and Radio items
//

// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly
@each $w,$a in ('check', 'checkbox'),
               ('radio','radio') {

  //standard checks and radios
  @each $s,$as in ('','-unchecked'),
                  (':insensitive','-unchecked-insensitive'),
                  (':inconsistent', '-mixed'),
                  (':inconsistent:insensitive', '-mixed-insensitive'),
                  (':checked', '-checked'),
                  (':checked:insensitive','-checked-insensitive') {
    .#{$w}#{$s} {
      -gtk-icon-source: -gtk-scaled(url("assets/#{$a}#{$as}#{$asset_suffix}.png"),
                                    url("assets/#{$a}#{$as}#{$asset_suffix}@2.png"));
      icon-shadow: none;
    }
    // the borders of checks and radios are
    // too similar in luminosity to the selected background color, hence
    // we need special casing.
    GtkTreeView.view.#{$w}#{$s}:selected,
    .menuitem.#{$w}#{$s}:hover,
    .list-row:selected .#{$w}#{$s} {
      -gtk-icon-source: -gtk-scaled(url("assets/#{$a}#{$as}-selected#{$asset_suffix}.png"),
                                    url("assets/#{$a}#{$as}-selected#{$asset_suffix}@2.png"));
    }
  }
}

// big selectionmode checkboxes
@each $s,$as in ('','-unchecked'),
                (':checked', '-checked') {
  GtkIconView.view.check#{$s},
  GtkFlowBox.view.check#{$s} {
    -gtk-icon-source: -gtk-scaled(url("assets/grid-selection#{$as}#{$asset_suffix}.png"),
                                  url("assets/grid-selection#{$as}#{$asset_suffix}@2.png"));
    background-color: transparent;
  }
}

GtkCheckButton.text-button, GtkRadioButton.text-button {
  // this is for a nice focus on check and radios text
  padding: 1px 2px 4px;
  outline-offset: 0;
  &:insensitive,
  &:insensitive:active,
  &:insensitive:inconsistent {
    // set insensitive color, which is overriden otherwise
    color: $insensitive_fg_color;
  }
}

//
// GtkScale
//
.scale {
  -GtkRange-slider-width: 19px;
  -GtkScale-slider-length: 19px;
  -GtkRange-trough-border: 1;
  outline-offset: -1px;
  outline-radius: 2px;
  //margin: 10px;

  &.trough {
    margin: 6px 0 5px 0;
    background-image: linear-gradient(to bottom,
                                      $trough_bg_color_a,
                                      $trough_bg_color_b);
    @include _border(scale-trough-border#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

    &.highlight {
      background-image: linear-gradient(to bottom,
                                        $scale_highlight_bg_a,
                                        $scale_highlight_bg_b);
      @include _border(scale-highlight-border#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

      &:insensitive {
        @if $variant==light {
          background-image: linear-gradient(to bottom,
                                            lighten($scale_highlight_bg_b, 11%),
                                            lighten($scale_highlight_bg_b, 16%));
        }
        @else {
          background-image: linear-gradient(to bottom,
                                            darken($scale_highlight_bg_b, 9%),
                                            darken($scale_highlight_bg_b, 4%));
        }
      }
    }
    &:insensitive {
      box-shadow: inset 0 1px 2px transparentize(black, 0.9);

      @if $variant==light {
        background-image: linear-gradient(to bottom,
                                          lighten($scale_highlight_bg_b, 23%),
                                          lighten($scale_highlight_bg_b, 28%));
      }
      @else {
        background-image: linear-gradient(to bottom,
                                          darken($scale_highlight_bg_b, 11%),
                                          darken($scale_highlight_bg_b, 8%));
      }
    }
    &.vertical {
      margin: 0 5px 0 6px;
      background-image: linear-gradient(to right,
                                        $trough_bg_color_a,
                                        $trough_bg_color_b);
      @include _border(scale-trough-vertical-border#{$asset_suffix}, $width: 5px 2px 5px 1px, $image-width: 6 3 6 2 / 6px 3px 6px 2px);

      &.highlight {
        background-image: linear-gradient(to right,
                                          $scale_highlight_bg_a,
                                          $scale_highlight_bg_b);
        @include _border(scale-vertical-highlight-border#{$asset_suffix}, $width: 5px 2px 5px 1px, $image-width: 6 3 6 2 / 6px 3px 6px 2px);

        &:insensitive {
          @if $variant==light {
            background-image: linear-gradient(to right,
                                              lighten($scale_highlight_bg_b, 11%),
                                              lighten($scale_highlight_bg_b, 16%));
          }
          @else {
            background-image: linear-gradient(to right,
                                              darken($scale_highlight_bg_b, 9%),
                                              darken($scale_highlight_bg_b, 4%));
          }
        }
      }
      &:insensitive {
        box-shadow: inset 1px 0 2px transparentize(black, 0.9);

        @if $variant==light {
          background-image: linear-gradient(to right,
                                            lighten($scale_highlight_bg_b, 23%),
                                            lighten($scale_highlight_bg_b, 28%));
        }
        @else {
          background-image: linear-gradient(to right,
                                            darken($scale_highlight_bg_b, 11%),
                                            darken($scale_highlight_bg_b, 8%));
        }    
      }
    }

    // Scale troughs in selected list-rows, only in light variant
    @if $variant == 'light' {
      .list-row:selected & {
        @include _border(scale-trough-border-selected#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);
        &.highlight {
          @include _border(scale-highlight-border-selected#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);
        }
      }
    }

    //OSD troughs
    .osd & {
      background-image: linear-gradient(to bottom,
                                        $osd_trough_bg_a,
                                        $osd_trough_bg_b);

      box-shadow: inset 0 1px 2px transparentize(black, 0.8);

      @include _border(scale-trough-osd-border, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

      &.highlight {
        background-image: linear-gradient(to bottom,
                                          transparentize($progressbar_background_a, 0.1),
                                          transparentize($progressbar_background_b, 0.1));
        box-shadow: inset 0 1px $progressbar_highlight;

        @include _border(scale-trough-osd-border, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);
      }
      &:insensitive {

      }
    }
  }
}

@each $i,$j in ('',''), ('.list-row:selected ','-selected') {

  @each $k,$l in ('',''),
                 (':hover','-hover'),
                 (':active','-active'),
                 (':insensitive','-insensitive') {

    // load scale sliders from .png files in assets directory

    #{$i}.scale.slider#{$k} {
      background-image: -gtk-scaled(url("assets/slider#{$l}#{$j}#{$asset_suffix}.png"),url("assets/slider#{$l}#{$j}#{$asset_suffix}@2.png"));
    }
    
    // use dark sliders for osd
    // no list-row special case needed
    @if $i=='' {
      .osd .scale.slider#{$k} { background-image: -gtk-scaled(url("assets/slider#{$l}-dark.png"),url("assets/slider#{$l}-dark@2.png")); }
    }
  }
}

//
// Progress bars
//
GtkProgressBar {
  padding: 0;
  font-size: 83%;
  color: transparentize($fg_color, 0.3);

  &.osd {
    -GtkProgressBar-xspacing: 0;
    -GtkProgressBar-yspacing: 0;
  }
}

// moving bit
.progressbar {
  border: 1px solid transparent;
  border-bottom-width: 2px;
  border-radius: 1px;
  background-image: linear-gradient(to bottom,
                                    $progressbar_background_a,
                                    $progressbar_background_b);
  box-shadow: inset 0 1px $progressbar_highlight;

  &.left {
    border-top-left-radius: 1px;
    border-bottom-left-radius: 1px;
  }
  &.right {
    border-top-right-radius: 1px;
    border-bottom-right-radius: 1px;
  }
  &.left.right {
    box-shadow: none;
  }
  &.vertical {
    background-image: linear-gradient(to right,
                                      $progressbar_background_a,
                                      $progressbar_background_b);
    box-shadow: inset 1px 0 $progressbar_highlight;
    border-bottom-width: 1px;
    border-right-width: 2px;

    &.bottom {
      border-bottom-left-radius: 1px;
      border-bottom-right-radius: 1px;
      box-shadow: none;
    }
    &.top {
      border-top-left-radius: 1px;
      border-top-right-radius: 1px;
    }
  }
  .osd &.scale, .osd & {
    background-clip: padding-box;
    background-image: none;
	  background-color: transparentize($selected_bg_color, 0.8);
    border: solid transparent;
	  border-width: 1px 4px 2px 4px;
    border-radius: 2px;
    box-shadow: none;
  }
}

// progressbar trough
GtkProgressBar.trough {
  padding: 2px;
  box-shadow: inset 0 1px 1px transparentize(black, 0.9);
  background-image: linear-gradient(to bottom,
                                    if($variant=='light', darken($trough_bg_color_a, 5%), darken($trough_bg_color_a, 2%)),
                                    if($variant=='light', darken($trough_bg_color_b, 11%), darken($trough_bg_color_b, 5%)));
  @include _border(trough-border#{$asset_suffix}, $radius: 2px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);

  &.vertical {
    box-shadow: inset 1px 0 1px transparentize(black, 0.9);
    background-image: linear-gradient(to right,
                                      if($variant=='light', darken($trough_bg_color_a, 5%), darken($trough_bg_color_a, 2%)),
                                      if($variant=='light', darken($trough_bg_color_b, 11%), darken($trough_bg_color_b, 5%)));
    @include _border(trough-vertical-border#{$asset_suffix}, $radius: 2px, $width: 1px 2px 1px 1px, $image-width: 2 3 2 2 / 2px 3px 2px 2px);
  }
  &.osd {
    background: none;
    border: none;
    box-shadow: none;
  }
}

//
// Level Bar
//
GtkLevelBar {
  -GtkLevelBar-min-block-width: 34;
  -GtkLevelBar-min-block-height: 5;
}

GtkLevelBar.vertical {
  -GtkLevelBar-min-block-width: 5;
  -GtkLevelBar-min-block-height: 34;
}

.level-bar {
  &.trough {
    @extend GtkProgressBar.trough;
  }
  &.fill-block {
    border: 1px solid $progressbar_border;
    background-image: linear-gradient(to bottom,
                                        lighten($progressbar_background_a, 10%),
                                        $progressbar_background_b 75%,
                                        darken($progressbar_background_a, 15%));
    box-shadow: inset 0 1px $progressbar_highlight;
    border-radius: 1px;

    &.indicator-discrete {
      &.horizontal { margin: 0 1px; }
      &.vertical { margin: 1px 0; }
    }
    &.level-high {
      border-color: $progressbar_border;
      background-image: linear-gradient(to bottom,
                                        lighten($success_color, 20%),
                                        $success_color 75%,
                                        darken($success_color, 5%));
      box-shadow: none;
    }
    &.level-low {
      border-color: $progressbar_border;
      background-image: linear-gradient(to bottom,
                                        lighten($warning_color, 30%),
                                        $warning_color 75%,
                                        darken($warning_color, 10%));
      box-shadow: none;
    }
    &.empty-fill-block {
      background-color: transparentize(black, 0.75);
      background-image: none;
      border-color: transparentize(black, 0.8);
      box-shadow: none;
    }
  }
}

//
// Frames
//
.frame {
  border: 1px solid $borders_color;
  &.flat { border-style: none; }
  padding: 0;
  &.action-bar {
    padding: 6px;
    border-width: 1px 0 0;
  }
}

// avoid double borders when viewport inside scrolled window
GtkScrolledWindow GtkViewport.frame { border-style: none; }

//vbox and hbox separators
.separator {
  color: if($variant=='light', transparentize(black, 0.9), transparentize(black, 0.8));

  // Font and File button separators
  GtkFileChooserButton &.vertical,
  GtkFontButton &.vertical {
    -GtkWidget-wide-separators: true;
  }
}

//
// Lists
//
.list, .list-row {
  border-color: $borders_color;
  background-color: if($variant=='light', $sidebar_bg, $base_color);
}

.list-row,
.grid-child {
  padding: 2px;
}

.list-row.button {
  @extend %undecorated_button;
  background-color: transparentize($base_color,1); // for the transition
  border-style: none; // I need no borders here
  border-radius: 0;   // and no rounded corners
  box-shadow: none;   // and no box-shadow
  &:hover {
    background-color: if($variant=='light', transparentize(black, 0.95), transparentize(white, 0.95));
  }
  &:active {
    color: $fg_color;
    box-shadow: inset 0 2px 2px -2px transparentize(black,0.8);
  }
  &:selected {
    &:active { 
      color: $selected_fg_color;
      box-shadow: inset 0 2px 3px -1px transparentize(black,0.5);
    }
    &:hover {
      background-color: mix(white, $selected_bg_color, 10%);
    }
  }
}

.list-row:selected {
  @extend %selected_items;
  text-shadow: 0 -1px $dark_text_icon_shadow;

  .button {

    &:focus { @include _border(button-normal-border#{$asset_suffix}); }
    &.flat, &.flat:focus {
      @include button(undecorated);

      color: $selected_fg_color;
      outline-color: transparentize($selected_fg_color, 0.7);
      text-shadow: 0 -1px $dark_text_icon_shadow;
      icon-shadow: none;
      &:hover {
        @include button(hover);      
      }
      &:active, &:checked {
        @include button(active, $border:'false');      
      }
      &:insensitive {
        color: transparentize($selected_fg_color, 0.5);
        text-shadow: none;
      }
    }
    &:active, &:checked,
    &:insensitive:active, &:insensitive:checked,
    &.flat:active, &.flat:checked,
    &.flat:focus:active, &.flat:focus:checked {
      @if $variant == 'light' { @include _border(button-active-border-selected); }
      @if $variant == 'dark' { @include _border(button-active-border-dark); }
    }
  }
}

// transition
.list-row, list-row.button {
  transition: all 300ms $ease-out-quad;
  &:hover { transition: none; }
}

//
// App Notifications
//
.app-notification,
.app-notification.frame {
  padding: 10px;
  border-width: 0 1px 1px;
  border-style: solid;
  border-color: if($variant=='light', transparentize(black, 0.8), transparentize(black, 0.5));
  border-radius: 0 0 3px 3px;
  background-image: linear-gradient(to bottom,
                                    if($variant=='light', lighten($bg_color, 2%), lighten($bg_color, 10%)),
                                    if($variant=='light', lighten($bg_color, 1%), lighten($bg_color, 5%)));
  background-clip: padding-box;

}

//
// Expanders
//
GtkExpander {
  -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
  &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }
  &:hover { color: lighten($fg_color,30%); } //only lightens the arrow
  &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
}

//
// Calendar
//
GtkCalendar {
  color: $fg_color;
  border: 1px solid $borders_color;
  &:selected {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
    border-radius: 3px;
  }
  &.header {
    border: 1px solid transparentize(black, 0.9);
    border-radius: 0;
  }
  &.button {
    @extend %undecorated_button;
    color: transparentize($fg_color,0.55);
    &:hover {
      @extend %undecorated_button;
      color: $fg_color;
    }
  }
  &:inconsistent, &.highlight { color: gtkalpha(currentColor,0.55); }
}

//
// Dialogs
//
.message-dialog .dialog-action-area .button {
  &:focus {
    background-image: linear-gradient(to bottom,
                                      $button_hover_gradient_color_a,
                                      $button_hover_gradient_color_b);

    outline-color: transparentize($fg_color, 0.7);
  }
  &:active, &:checked {
    background-image: linear-gradient(to bottom,
		                                  $button_active_gradient_color_a,
                                      $button_active_gradient_color_b);

    outline-color: transparentize($button_active_fg, 0.7);
  }
}

.message-dialog {
  -GtkDialog-button-spacing: 0;
  -GtkDialog-action-area-border: 4px;
}

GtkFileChooserDialog {
  @extend %thin_separator
}

GtkFileChooserDialog {
  .search-bar {
    background-color: lighten($bg_color, 2%);
    box-shadow: none;
  }
  .dialog-action-box {
    border-top: 1px solid $borders_color;
  }
}

//
// Sidebar
//
.sidebar, .sidebar .view {
  border: none;
  background-color: $sidebar_bg;
  color: transparentize($fg_color, 0.2);

  icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
  text-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;

  .scrollbars-junction,
  .scrollbars-junction.frame,
  .scrollbar.trough {
    box-shadow: none;
    border-image: none;
  	border-color: transparent;
  	background-color: $sidebar_bg;
  	background-image: none;
  }
  &:selected { @extend %selected_gradient; }
  &.separator { @extend .separator; }
}

.sidebar-item {
  padding: 10px 4px;
  > GtkLabel {
    padding-left: 6px;
    padding-right: 6px;
  }
  &.needs-attention > GtkLabel {
    @extend %needs_attention;
    background-size: 6px 6px, 0 0;
  }
}

GtkPaned {
  // This is actually the invisible area of the paned separator, not a margin...
  margin: 0 8px 8px 0; //drag area of the separator
  &:dir(rtl) {
    margin-right: 0;
    margin-left: 8px;
  }
}

.pane-separator {
  background-color: $bg_color;
  @include handle();

  .notebook & { background-color: darken($base_color, 2%); }
  .toolbar & { background-color: transparent; }
  
  &.vertical { @include handle(vertical); }
}

// Makes Pane Separators 1px wide
%thin_separator {
  * { -GtkPaned-handle-size: 1px; }

  .pane-separator,
  .pane-separator:hover {
    background-color: $borders_color;
  }
}

//
// GtkInfoBar
//
GtkInfoBar {
  border: none;
}

.info,
.question,
.warning,
.error {
  background-color: $infobar_bg_color;
  color: $infobar_fg_color;
  text-shadow: 0 #{$shadow_pos}px $infobar_text_shadow;
  border-color: mix($infobar_bg_color, black, 85%);
	border-style: solid;
	border-width: 0 0 1px 0;
}

//
// Tooltips
//
.tooltip {
  color: white;
  padding: 4px; // not working
  border-radius: 2px;

  &.background {
    background-color: transparentize(black, 0.2);
    background-clip: padding-box;
  }
  &.window-frame.csd {
    background-color: transparent;
  }
}

.tooltip * { //Yeah this is ugly
  padding: 4px;
  background-color: transparent;
  color: inherit; // just to be sure
}

//
// Color Chooser
//
GtkColorSwatch {
  border: 1px solid;
  box-shadow: inset 0 1px 1px transparentize(black, 0.8);
  border-color: if($variant=='light', transparentize(black,0.7), $borders_color);

  &.color-light {
    &:hover {
      background-image: linear-gradient(to bottom,
                                        transparentize(white, 1) 40%,
                                        transparentize(black, 0.8));
    }
  }
  &.color-dark {
    &:hover {
       background-image: linear-gradient(to bottom,
                                        transparentize(white, 1) 40%,
                                        transparentize(white, 0.8));
    }
  }

  &:hover {
   border-color: if($variant=='light', transparentize(black, 0.5), $borders_color);
  }

  &.top {
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
  }
  &.bottom {
    border-bottom-left-radius: 3px;
    border-bottom-right-radius: 3px;
  }
  &.left, &:first-child {
    border-top-left-radius: 3px;
    border-bottom-left-radius: 3px;
  }
  &.right, &:last-child {
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px;
  }
  &:only-child {
    border-radius: 3px;
  }
  &.color-active-badge {
    border-width: 2px;
    &:hover { background-image: none; }
    &.color-light, &.color-light:hover {
      color: transparentize(black,0.7);
      border-color: transparentize(black,0.7);
    }
    &.color-dark, &.color-dark:hover {
      color: transparentize(white,0.5);
      border-color: transparentize(white,0.5);
    }
  }
}

GtkColorChooserWidget #add-color-button {
  border-color: $borders_color;
  background-color: $base_color;
  color: $fg_color;
  box-shadow: none;

  &:hover {
    border-color: $borders_color;
    background-color: $borders_color;
  }
}

GtkColorButton.button {
  padding: 4px; // Uniform padding on the GtkColorButton
  GtkColorSwatch {
    border-radius: 1.5px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.2), 0 1px $highlight_shadow;
  }
}

//
// Misc
//
.scale-popup .button { // +/- buttons on GtkVolumeButton popup
  padding: 6px;

  &:hover {
    @extend %undecorated_button;
    background-color: transparentize($fg_color,0.9);
    border-radius: 2px;
  }
}

GtkVolumeButton.button { padding: 8px; }

.cell:selected { @extend %selected_gradient; }

//
// Window Decorations
//
.window-frame {
  border-radius: 3px 3px 0 0;
  border-width: 0px;

  box-shadow: 0 0 0 1px $window_frame, 0 2px 8px 1px $wm_shadow;

  // this is used for the resize cursor area
  margin: 10px;

  &:backdrop {
    box-shadow: 0 0 0 1px $window_frame, 0 2px 5px 0 $wm_shadow;
  }
  &.tiled {
    border-radius: 0;
  }
  &.csd {
    &.popup {
      border-radius: 0;
      @if $variant==light { box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.12); }
      @else { box-shadow: 0 2px 4px rgba(0, 0, 0, 0.7), 0 0 0 1px $borders_color; }
    }
    &.tooltip {
      border-radius: 3px;
      box-shadow: 0 1px 4px 1px rgba(0, 0, 0, 0.4);
    }
  }
}

// Window buttons

.header-bar, .titlebar,
.header-bar.selection-mode, .titlebar.selection-mode {

  .button.titlebutton {
    padding: 4px 3px 4px 3px;
    @include button(undecorated);

    color: transparent;
    background-position: center;
    background-repeat: no-repeat;
  }

  // Generic titlebuttons

  .left .button.titlebutton,
  .right .button.titlebutton {
    background-image: -gtk-scaled(url('assets/titlebutton.png'),url('assets/titlebutton@2.png'));

    &:backdrop {
      background-image: -gtk-scaled(url('assets/titlebutton-unfocused.png'),url('assets/titlebutton-unfocused@2.png'));
    }
  }

  // Minimize

  .right .button.titlebutton:nth-last-child(3):hover,
  .right:dir(rtl) .button.titlebutton:nth-child(3):hover,
  .left .button.titlebutton:nth-child(3):hover,
  .left:dir(rtl) .button.titlebutton:nth-last-child(3):hover {
    background-image: -gtk-scaled(url('assets/titlebutton-minimize-hover.png'),url('assets/titlebutton-minimize-hover@2.png'));

    &:active { background-image: -gtk-scaled(url('assets/titlebutton-minimize-active.png'),url('assets/titlebutton-minimize-active@2.png')); }
}

  // Maximize

  .right .button.titlebutton:nth-last-child(2):hover,
  .right:dir(rtl) .button.titlebutton:nth-child(2):hover,
  .left .button.titlebutton:nth-child(2):hover,
  .left:dir(rtl) .button.titlebutton:nth-last-child(2):hover {
    background-image: -gtk-scaled(url('assets/titlebutton-maximize-hover.png'),url('assets/titlebutton-maximize-hover@2.png'));

    &:active { background-image: -gtk-scaled(url('assets/titlebutton-maximize-active.png'),url('assets/titlebutton-maximize-active@2.png')); }
}

  // Close

  .right .button.titlebutton:last-child:hover,
  .right:dir(rtl) .button.titlebutton:first-child:hover,
  .left .button.titlebutton:first-child:hover,
  .left:dir(rtl) .button.titlebutton:last-child:hover {
    background-image: -gtk-scaled(url('assets/titlebutton-close-hover.png'),url('assets/titlebutton-close-hover@2.png'));

    &:active { background-image: -gtk-scaled(url('assets/titlebutton-close-active.png'),url('assets/titlebutton-close-active@2.png')); }
  }
}

// Fallback menubutton
.header-bar .left GtkMenuButton.button.titlebutton:first-child,
.header-bar .left:dir(rtl) GtkMenuButton.button.titlebutton:last-child,
.header-bar.selection-mode .left GtkMenuButton.button.titlebutton:first-child,
.header-bar.selection-mode .left:dir(rtl) GtkMenuButton.button.titlebutton:last-child,
.titlebar .left GtkMenuButton.button.titlebutton:first-child,
.titlebar .left:dir(rtl) GtkMenuButton.button.titlebutton:last-child,
.titlebar.selection-mode .left GtkMenuButton.button.titlebutton:first-child,
.titlebar.selection-mode .left:dir(rtl) GtkMenuButton.button.titlebutton:last-child {

  padding: 4px 5px 4px 5px;
  color: $wm_title;

  @include button(undecorated);

  text-shadow: 0 #{$shadow_pos * $darker_shadow_pos}px $wm_title_shadow;
  icon-shadow: none;

  &:hover {
    @include button(hover, $darker);
    icon-shadow: none;
  }
  &:active, &:checked {
    @include button(active, $darker);
    icon-shadow: none;
  }
  &:backdrop { color: $wm_unfocused_title; }
}


// catch all extend :)
%selected_items {
  background-color: $selected_bg_color;
  color: $selected_fg_color;
  @if $variant == 'light' {
    outline-color: transparentize($selected_fg_color, 0.7);
  }
}

%selected_gradient {
  color: $selected_fg_color;
  border-width: 1px 0;
  border-style: solid;
  border-top-color: mix($selected_bg_color, $base_color, 95%);
  border-bottom-color: mix($selected_bg_color, $base_color, 85%);
  text-shadow: 0 -1px $dark_text_icon_shadow;
  icon-shadow: none;

  @if $variant==light {
    background-image: linear-gradient(to bottom,
                                      mix($selected_bg_color, $base_color, 90%),
                                      mix($selected_bg_color, $base_color, 70%));
  }
  @else {
    background-image: linear-gradient(to top,
                                      mix($selected_bg_color, $base_color, 90%),
                                      mix($selected_bg_color, $base_color, 70%));
  }
}

// Decouple the font of context menus from their entry/textview
.touch-selection,
.context-menu {
  font: initial;
}

.monospace {
  font: Monospace;
}
